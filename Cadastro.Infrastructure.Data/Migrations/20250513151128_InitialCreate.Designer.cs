// <auto-generated />
using System;
using Cadastro.Infrastructure.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cadastro.Infrastructure.Data.Migrations
{
    [DbContext(typeof(CadastroContext))]
    [Migration("20250513151128_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.1");

            modelBuilder.Entity("Cadastro.Domain.Entities.AddressEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<string>("complement")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasColumnName("complement");

                    b.Property<int>("number")
                        .HasColumnType("int")
                        .HasColumnName("number");

                    b.Property<string>("street")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("street");

                    b.Property<int>("userId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("zipCode")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("zipCode");

                    b.HasKey("Id");

                    b.HasIndex("userId");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("Cadastro.Domain.Entities.EmailEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("Varchar(100)")
                        .HasColumnName("Email");

                    b.Property<int>("userId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("userId");

                    b.ToTable("Email", (string)null);
                });

            modelBuilder.Entity("Cadastro.Domain.Entities.FoneNumberEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<string>("ddd")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ddi")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("number")
                        .IsRequired()
                        .HasColumnType("varchar(14)")
                        .HasColumnName("FoneNumber");

                    b.Property<int>("userId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("userId");

                    b.ToTable("FoneNumber", (string)null);
                });

            modelBuilder.Entity("Cadastro.Domain.Entities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<string>("confirmPassword")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ConfirmPassword");

                    b.Property<DateTime>("dateBirthday")
                        .HasColumnType("datetime");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Name");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Password");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Cadastro.Domain.Entities.AddressEntity", b =>
                {
                    b.HasOne("Cadastro.Domain.Entities.UserEntity", "user")
                        .WithMany("address")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Cadastro.Domain.Entities.EmailEntity", b =>
                {
                    b.HasOne("Cadastro.Domain.Entities.UserEntity", "user")
                        .WithMany("email")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Cadastro.Domain.Entities.FoneNumberEntity", b =>
                {
                    b.HasOne("Cadastro.Domain.Entities.UserEntity", "user")
                        .WithMany("foneNumber")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Cadastro.Domain.Entities.UserEntity", b =>
                {
                    b.Navigation("address");

                    b.Navigation("email");

                    b.Navigation("foneNumber");
                });
#pragma warning restore 612, 618
        }
    }
}
